import { DataProvider } from '../types';
interface ActionWithSideEffect {
    type: string;
    payload: any;
    meta: {
        fetch: string;
        resource: string;
        onSuccess?: any;
        onFailure?: any;
    };
}
export declare function handleFetch(dataProvider: DataProvider, action: ActionWithSideEffect): IterableIterator<import("@redux-saga/types").SimpleEffect<"CALL", import("redux-saga/effects").CallEffectDescriptor> | import("@redux-saga/types").SimpleEffect<"SELECT", import("redux-saga/effects").SelectEffectDescriptor> | import("@redux-saga/types").CombinatorEffect<"ALL", import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<{
    type: string;
}>>> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<{
    type: string;
}>> | import("@redux-saga/types").SimpleEffect<"CANCELLED", import("redux-saga/effects").CancelledEffectDescriptor>>;
export declare const takeFetchAction: (action: any) => any;
declare const fetch: (dataProvider: DataProvider) => () => IterableIterator<import("@redux-saga/types").SimpleEffect<"FORK", import("redux-saga/effects").ForkEffectDescriptor>>;
export default fetch;
