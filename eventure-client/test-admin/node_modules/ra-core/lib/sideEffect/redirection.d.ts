import { Identifier } from '../types';
declare type RedirectToFunction = (basePath: string, id: Identifier, data: any) => string;
export declare type RedirectionSideEffect = string | boolean | RedirectToFunction;
interface ActionWithSideEffect {
    type: string;
    payload?: {
        id?: string | number;
        data?: {
            id?: string | number;
        };
    };
    requestPayload?: {
        id?: string | number;
        data?: {
            id?: string | number;
        };
    };
    meta: {
        redirectTo: RedirectionSideEffect;
        basePath?: string;
    };
}
/**
 * Redirection Side Effects
 */
export declare function handleRedirection({ payload, requestPayload, meta: { basePath, redirectTo }, }: ActionWithSideEffect): IterableIterator<import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<import("connected-react-router").CallHistoryMethodAction<[string, any?]>>> | import("@redux-saga/types").SimpleEffect<"PUT", import("redux-saga/effects").PutEffectDescriptor<import("../actions/uiActions").RefreshViewAction>>>;
export default function (): IterableIterator<import("@redux-saga/types").SimpleEffect<"FORK", import("redux-saga/effects").ForkEffectDescriptor>>;
export {};
